import { getContentBySlug, getPromptBreadcrumbs, type Prompt, type LLM, type Category } from '@/lib/content';
import { type Locale } from '@/config/i18n';
import { notFound } from 'next/navigation';
import { MDXRemote } from 'next-mdx-remote/rsc';
import Breadcrumbs from '@/components/Breadcrumbs';
import { LlmSampleTabs } from '@/components/prompts/LlmSampleTabs';
import { LlmSample } from '@/components/prompts/LlmSample';

// Import MDX components
import { PromptDescription } from '@/components/prompts/PromptDescription';
import { PromptInstructions } from '@/components/prompts/PromptInstructions';
import { PromptTips } from '@/components/prompts/PromptTips';
import PromptTemplate from '@/components/prompts/PromptTemplate';

// Define components for MDX
const components = {
  PromptDescription,
  PromptInstructions,
  PromptTips,
  PromptTemplate,
};

// Helper functions for LLM samples
function getLlmColor(slug: string): string {
  const colors: Record<string, string> = {
    'chatgpt': '#10a37f',
    'claude': '#8e44ef',
    'llama': '#0066FF',
    'default': '#ffffff'
  };
  return colors[slug] || colors.default;
}

function getLlmSampleContent(slug: string): string {
  // Sample content for different LLMs
  const samples: Record<string, string> = {
    'chatgpt': 'This is a sample output from ChatGPT...',
    'claude': 'Claude AI responding to your prompt...',
    'llama': 'Llama 3 generating creative content...',
    'default': 'Sample LLM output text'
  };
  return samples[slug] || samples.default;
}

// Next.js 15 uses Promise-based params
export default async function PromptPage({ params }: {
  params: Promise<{ locale: Locale; slug: string }>
}) {
  console.log('==== DEBUG PromptPage: Starting page render');
  try {
    // Await params before using them
    const { locale, slug } = await params;
    console.log('==== DEBUG PromptPage: Got params', { locale, slug });
  
  // Get prompt and its breadcrumbs
  try {
    console.log('==== DEBUG PromptPage: Loading prompt', { locale, slug });
    const prompt = await getContentBySlug<Prompt>(locale, 'prompts', slug);
    console.log('==== DEBUG PromptPage: Prompt loaded', prompt ? 'YES' : 'NO');
    
    if (!prompt) {
      console.log('==== DEBUG PromptPage: Prompt not found, returning 404');
      notFound();
    }

  // Safely get breadcrumbs, handling potential errors
  let breadcrumbItems = [];
  try {
    const breadcrumbs = await getPromptBreadcrumbs(locale, slug);
    breadcrumbItems = [
      { label: 'Home', href: '/' },
      ...breadcrumbs.map(({ category, prompt }) => ({
        label: prompt?.title || category.name,
        href: prompt ? `/prompts/${prompt.slug}` : `/categories/${category.slug}`,
      })),
    ];
  } catch (error) {
    console.error(`Error getting breadcrumbs for prompt ${slug}:`, error);
    breadcrumbItems = [{ label: 'Home', href: '/' }];
  }

  // Get featured LLMs if specified in frontmatter
  const featuredLlms = prompt.featured_llms || [];
  const llmSamples = await Promise.all(
    featuredLlms.map(async (llmSlug) => {
      try {
        return await getContentBySlug<LLM>(locale, 'llms', llmSlug);
      } catch (error) {
        console.error(`Error loading LLM ${llmSlug}:`, error);
        return null;
      }
    })
  );

  // Filter out null values and ensure we have valid LLMs
  const validLlms = llmSamples.filter((llm): llm is LLM => llm !== null);

  try {
      console.log('==== DEBUG PromptPage: Rendering prompt page');
      return (
        <div className="max-w-5xl mx-auto px-4 py-12">
          {/* Breadcrumbs */}
          <Breadcrumbs items={breadcrumbItems} />

          <h1 className="text-4xl font-bold tracking-tight mb-4">
            {prompt.title}
          </h1>

          <div className="flex flex-wrap gap-4 mb-12">
            {prompt.compatible_llms && prompt.compatible_llms.map((llmSlug: string) => (
              <span
                key={llmSlug}
                className="px-3 py-1 rounded-full bg-white/5 text-sm font-medium"
              >
                {llmSlug}
              </span>
            ))}
          </div>

          <div className="prose prose-invert max-w-none mb-16">
            {/* Wrap MDX in try/catch */}
            {(() => {
              try {
                console.log('==== DEBUG PromptPage: Rendering MDX content');
                return (
                  <MDXRemote
                    source={prompt.content}
                    components={components}
                  />
                );
              } catch (error) {
                console.error('==== DEBUG PromptPage: Error rendering MDX content:', error);
                return <div>Error rendering content</div>;
              }
            })()}
          </div>

          {/* LLM Sample Outputs */}
          {validLlms.length > 0 && (
            <LlmSampleTabs>
              {validLlms.map((llm) => (
                <LlmSample
                  key={llm.slug}
                  slug={llm.name || llm.slug}
                  color={getLlmColor(llm.slug)}
                >
                  {getLlmSampleContent(llm.slug)}
                </LlmSample>
              ))}
            </LlmSampleTabs>
          )}
        </div>
      );
    } catch (error) {
      console.error('==== DEBUG PromptPage: Error rendering prompt page:', error);
      return <div>Error rendering prompt page</div>;
    }
  } catch (error) {
    console.error('==== DEBUG PromptPage: Unhandled error in prompt page:', error);
    return <div>An error occurred</div>;
  }
}