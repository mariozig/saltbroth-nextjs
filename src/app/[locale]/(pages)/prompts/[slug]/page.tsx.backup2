import { getContentBySlug, getPromptBreadcrumbs, type Prompt, type LLM, type Category } from '@/lib/content';
import { type Locale } from '@/config/i18n';
import { notFound } from 'next/navigation';
import { MDXRemote } from 'next-mdx-remote/rsc';
import Breadcrumbs from '@/components/Breadcrumbs';
import { LlmSampleTabs } from '@/components/prompts/LlmSampleTabs';
import { LlmSample } from '@/components/prompts/LlmSample';

// Import MDX components
import { PromptDescription } from '@/components/prompts/PromptDescription';
import { PromptInstructions } from '@/components/prompts/PromptInstructions';
import { PromptTips } from '@/components/prompts/PromptTips';
import PromptTemplate from '@/components/prompts/PromptTemplate';

// Define components for MDX
const components = {
  PromptDescription,
  PromptInstructions,
  PromptTips,
  PromptTemplate,
};

function getLlmColor(slug: string): string {
  // Sample colors for different LLMs
  const colors: Record<string, string> = {
    'chatgpt': '#10a37f',
    'claude': '#965df5',
    'llama': '#ff6700',
    'default': '#ffffff'
  };
  return colors[slug] || colors.default;
}

function getLlmSampleContent(slug: string): string {
  // Sample content for different LLMs
  const samples: Record<string, string> = {
    'chatgpt': 'This is a sample output from ChatGPT...',
    'claude': 'Claude AI responding to your prompt...',
    'llama': 'Llama 3 generating creative content...',
    'default': 'Sample LLM output text'
  };
  return samples[slug] || samples.default;
}

// Next.js 15 uses Promise-based params
export default async function PromptPage({ params }: {
  params: Promise<{ locale: Locale; slug: string }>
}) {
  console.log('==== DEBUG: Starting PromptPage');
  
  // Await params before using them
  const { locale, slug } = await params;
  console.log('==== DEBUG: Got params', { locale, slug });
  
  try {
    // Get prompt and its breadcrumbs
    console.log('==== DEBUG: Loading prompt', { locale, slug });
    const prompt = await getContentBySlug<Prompt>(locale, 'prompts', slug);
    console.log('==== DEBUG: Prompt loaded successfully', { 
      hasPrompt: !!prompt,
      keys: prompt ? Object.keys(prompt) : [],
      categorySlug: prompt?.category_slug 
    });
    
    if (!prompt) {
      console.log('==== DEBUG: Prompt not found, returning 404');
      notFound();
    }

    // Safely get breadcrumbs, handling potential errors
    let breadcrumbItems = [];
    console.log('==== DEBUG: Getting breadcrumbs');
    
    try {
      const breadcrumbs = await getPromptBreadcrumbs(locale, slug);
      console.log('==== DEBUG: Breadcrumbs loaded', { count: breadcrumbs.length });
      
      breadcrumbItems = [
        { label: 'Home', href: '/' },
        ...breadcrumbs.map(({ category, prompt }) => ({
          label: prompt?.title || category.name,
          href: prompt ? `/prompts/${prompt.slug}` : `/categories/${category.slug}`,
        })),
      ];
      console.log('==== DEBUG: Breadcrumb items created', { count: breadcrumbItems.length });
    } catch (error) {
      console.error(`==== DEBUG: Error getting breadcrumbs for prompt ${slug}:`, error);
      breadcrumbItems = [{ label: 'Home', href: '/' }];
    }

    // Get featured LLMs if specified in frontmatter
    console.log('==== DEBUG: Getting featured LLMs');
    const featuredLlms = prompt.featured_llms || [];
    
    console.log('==== DEBUG: Loading LLM samples');
    const llmSamples = await Promise.all(
      featuredLlms.map(async (llmSlug) => {
        try {
          return await getContentBySlug<LLM>(locale, 'llms', llmSlug);
        } catch (error) {
          console.error(`==== DEBUG: Error loading LLM ${llmSlug}:`, error);
          return null;
        }
      })
    );

    // Filter out null values and ensure we have valid LLMs
    const validLlms = llmSamples.filter((llm): llm is LLM => llm !== null);
    console.log('==== DEBUG: Valid LLMs:', { count: validLlms.length });

    console.log('==== DEBUG: Rendering page');
    return (
      <div className="max-w-5xl mx-auto px-4 py-12">
        {/* Breadcrumbs */}
        <Breadcrumbs items={breadcrumbItems} />

        <h1 className="text-4xl font-bold tracking-tight mb-4">
          {prompt.title}
        </h1>

        <div className="flex flex-wrap gap-4 mb-12">
          {prompt.compatible_llms && prompt.compatible_llms.map((llmSlug: string) => (
            <span
              key={llmSlug}
              className="px-3 py-1 rounded-full bg-white/5 text-sm font-medium"
            >
              {llmSlug}
            </span>
          ))}
        </div>

        <div className="prose prose-invert max-w-none mb-16">
          <MDXRemote
            source={prompt.content}
            components={components}
          />
        </div>

        {/* LLM Sample Outputs */}
        {validLlms.length > 0 && (
          <LlmSampleTabs>
            {validLlms.map((llm) => (
              <LlmSample
                key={llm.slug}
                slug={llm.name || llm.slug}
                color={getLlmColor(llm.slug)}
              >
                {getLlmSampleContent(llm.slug)}
              </LlmSample>
            ))}
          </LlmSampleTabs>
        )}
      </div>
    );
  } catch (error) {
    console.error('==== DEBUG: Unhandled error in PromptPage:', error);
    throw error; // Re-throw to show the error page
  }
}